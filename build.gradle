buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath("org.jetbrains.kotlinx:kover:0.6.0")
    }
}

plugins {
    id "org.jetbrains.kotlin.jvm" version "1.7.20" apply false
    id "org.jetbrains.kotlinx.kover" version "0.6.0"
    id "org.jetbrains.dokka" version "1.7.10"
    id "org.sonarqube" version "3.4.0.2513"
    id "io.github.gradle-nexus.publish-plugin" version "1.1.0"
}

repositories {
    mavenCentral()
}

sonarqube {
    properties {
        property "sonar.projectKey", "hwolf_kvalidation"
        property "sonar.organization", "hwolf"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.junit.reportPaths", "**/build/test-results/**/*.xml"
        property "sonar.coverage.jacoco.xmlReportPaths", "**/build/kover/result.xml"
    }
}

nexusPublishing {
    repositories {
        sonatype {
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
        }
    }
}

subprojects {
    apply plugin: "maven-publish"
    apply plugin: "signing"
    apply plugin: "kover"

    repositories {
        mavenCentral()
    }
}

configure(subprojects.findAll { !it.name.contains("bom") }) {

    apply plugin: "org.jetbrains.kotlin.jvm"
    apply plugin: "org.jetbrains.kotlinx.kover"
    apply plugin: "org.jetbrains.dokka"
    apply plugin: "org.sonarqube"

    dependencies {
        testImplementation(platform("org.junit:junit-bom:5.9.1"))
        testImplementation(platform("io.strikt:strikt-bom:0.34.1"))
        testImplementation(platform("io.kotest:kotest-bom:5.4.2"))

        testImplementation "io.kotest:kotest-runner-junit5"
        testImplementation "io.kotest:kotest-framework-datatest"
        testImplementation "io.kotest:kotest-property"
        testImplementation "io.strikt:strikt-core"
        testImplementation "io.mockk:mockk:1.13.2"
        testImplementation "org.tinylog:tinylog-impl:2.5.0"
        testImplementation("org.tinylog:slf4j-tinylog:2.5.0") {
            exclude group: "org.slf4j"
        }
    }

    compileKotlin {
        kotlinOptions {
            freeCompilerArgs = ["-Xjsr305=strict", "-opt-in=kotlin.RequiresOptIn"]
            jvmTarget = "11"
        }
    }

    compileTestKotlin {
        kotlinOptions {
            freeCompilerArgs = ["-Xjsr305=strict"]
            jvmTarget = "11"
        }
    }

    test {
        useJUnitPlatform {
        }
        kover {
            enabled = true
        }
    }

    kover {
        xmlReport {
            reportFile.set(layout.buildDirectory.file("kover/result.xml"))
        }
    }

    task sourceJar(type: Jar, dependsOn: classes) {
        archiveClassifier = 'sources'
        from sourceSets.main.allSource
    }

    task dokkaJar(type: Jar, dependsOn: dokkaHtml) {
        archiveClassifier = "javadoc"
        from dokkaHtml
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from(components.java)
                artifact sourceJar
                artifact dokkaJar
                pom {
                    name.set("Validation DSL for Kotlin")
                    description.set("Validation DSL for Kotlin is a type-safe, powerful and extensible fluent DSL to validate objects in Kotlin")
                    url.set("https://github.com/hwolf/kvalidation")
                    licenses {
                        license {
                            name.set("Apache 2.0")
                            url.set("https://raw.githubusercontent.com/hwolf/kvalidation/main/LICENSE")
                        }
                    }
                    developers {
                        developer {
                            id.set("hwolf")
                            name.set("hwolf")
                        }
                    }
                    scm {
                        connection.set("scm:git:git://github.com/hwolf/kvalidation.git")
                        developerConnection.set("scm:git:git://github.com/hwolf/kvalidation.git")
                        url.set("https://github.com/hwolf/kvalidation")
                    }
                }
            }
        }
    }

    signing {
        def signingKey = findProperty("signingKey")
        def signingPassword = findProperty("signingPassword")
        useInMemoryPgpKeys(signingKey, signingPassword)
        sign publishing.publications.mavenJava
    }
}
