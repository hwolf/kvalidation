plugins {
    id "org.jetbrains.kotlin.jvm" version "1.6.10" apply false
    id "org.jetbrains.kotlinx.kover" version "0.5.0" apply false
    id "org.jetbrains.dokka" version "1.6.10"
    id "org.sonarqube" version "3.3"
    id "io.github.gradle-nexus.publish-plugin" version "1.1.0"
}

repositories {
    mavenCentral()
}

sonarqube {
    properties {
        property "sonar.projectKey", "hwolf_validation"
        property "sonar.organization", "hwolf"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.junit.reportPaths", "**/build/test-results/**/*.xml"
        property "sonar.coverage.jacoco.xmlReportPaths", "**/build/reports/kover/report.xml"
    }
}

nexusPublishing {
    repositories {
        credentials {
            username = project.properties["central.user"]
            password = project.properties["central.passwd"]
        }
    }
}

subprojects {
    apply plugin: "maven-publish"
    apply plugin: "signing"

    group = "io.github.hwolf.kvalidation"

    repositories {
        mavenCentral()
    }

    /*publishing {
        publications {
            mavenJava(Sonatype) {
            }
        }
    }*/

    /*signing {
        def signingKey = findProperty("signingKey")
        def signingPassword = findProperty("signingPassword")
        useInMemoryPgpKeys(signingKey, signingPassword)
        sign publishing.publications.mavenJava
    }*/
}

configure(subprojects.findAll { !it.name.contains("bom") }) {

    apply plugin: "org.jetbrains.kotlin.jvm"
    apply plugin: "org.jetbrains.kotlinx.kover"
    apply plugin: "org.jetbrains.dokka"
    apply plugin: "org.sonarqube"

    dependencies {
        implementation(platform("org.jetbrains.kotlin:kotlin-bom"))

        testImplementation(platform("org.junit:junit-bom:5.8.2"))
        testImplementation(platform("io.strikt:strikt-bom:0.34.1"))
        testImplementation(platform("io.kotest:kotest-bom:5.1.0"))

        testImplementation "io.kotest:kotest-runner-junit5"
        testImplementation "io.kotest:kotest-framework-datatest"
        testImplementation "io.kotest:kotest-property"
        testImplementation "io.strikt:strikt-core"
        testImplementation "io.mockk:mockk:1.12.2"
        testImplementation "org.tinylog:tinylog-impl:2.4.1"
        testImplementation "org.tinylog:slf4j-tinylog:2.4.1"
    }

    compileKotlin {
        kotlinOptions {
            freeCompilerArgs = ["-Xjsr305=strict", "-opt-in=kotlin.RequiresOptIn"]
            jvmTarget = "11"
        }
    }

    compileTestKotlin {
        kotlinOptions {
            freeCompilerArgs = ["-Xjsr305=strict"]
            jvmTarget = "11"
        }
    }

    test {
        useJUnitPlatform {
        }
        kover {
            enabled = true
        }
    }
    tasks.koverXmlReport {
        enabled = true
        xmlReportFile.set(layout.buildDirectory.file("kover/result.xml"))
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from(components.java)
            }
        }
    }

    task sourceJar(type: Jar, dependsOn: classes) {
        archiveClassifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: dokkaHtml) {
        archiveClassifier = "javadoc"
        from dokkaHtml
    }
}
