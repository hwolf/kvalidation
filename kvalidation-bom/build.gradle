plugins {
    id "java-platform"
}

dependencies {
    constraints {
        api(project(":kvalidation-core"))
        api(project(":kvalidation-common"))
        api(project(":kvalidation-i18n"))
        api(project(":kvalidation-icu"))
    }
}

//javaPlatform {
//    allowDependencies()
//}

/*publishing {
    publications {
        mavenJava(MavenPublication) {
            from(components.javaPlatform)
            pom {
                name.set("Validation DSL for Kotlin")
                description.set("Validation DSL for Kotlin is a type-safe, powerful and extensible fluent DSL to validate objects in Kotlin")
                url.set("https://github.com/hwolf/kvalidation")
                licenses {
                    license {
                        name.set("Apache 2.0")
                        url.set("https://raw.githubusercontent.com/hwolf/kvalidation/main/LICENSE")
                    }
                }
                developers {
                    developer {
                        id.set("hwolf")
                        name.set("hwolf")
                    }
                }
                scm {
                    connection.set("scm:git:git://github.com/hwolf/kvalidation.git")
                    developerConnection.set("scm:git:git://github.com/hwolf/kvalidation.git")
                    url.set("https://github.com/hwolf/kvalidation")
                }
            }
        }
    }
}

signing {
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.mavenJava
}
 */
